<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Return Book - LibraryHub</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <link rel="stylesheet" href="/returnBook.css"> <!-- Link to the external CSS file -->
    <h1>Return Book</h1>
    <%- include("./partials/navbar") %>
</head>
<body>
    <!-- Navbar -->

    <!-- Search Bar -->
    <div class="search-bar">
        <input type="text" id="searchUserId" placeholder="Enter User ID">
        <button id="searchButton"><i class="fas fa-search"></i></button>
    </div>

    <!-- Records Table -->
    <div class="records-container">
        <table id="recordsTable">
            <thead>
                <tr>
                    <th>Sl No</th>
                    <th>User ID</th>
                    <th>Book ID</th>
                    <th>Book Name</th>
                    <th>Due Date</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <!-- Records will be dynamically inserted here -->
            </tbody>
        </table>
    </div>

    <!-- JavaScript -->
    <script>
        // Function to fetch and display records
        function fetchRecords(userId = '') {
            console.log(`Fetching records for User ID: ${userId || 'All Users'}`);
            fetch(`/api/return-book?userId=${userId}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error(`Failed to fetch records: ${response.statusText}`);
                    }
                    return response.json();
                })
                .then(data => {
                    console.log('Records fetched successfully:', data);
                    const tbody = document.querySelector('#recordsTable tbody');
                    tbody.innerHTML = ''; // Clear existing rows

                    if (data.length === 0) {
                        console.log('No records found.');
                        tbody.innerHTML = `<tr><td colspan="6" style="text-align: center;">No records found.</td></tr>`;
                        return;
                    }

                    data.forEach((record, index) => {
                        const row = document.createElement('tr');
                        row.innerHTML = `
                            <td>${index + 1}</td>
                            <td>${record.UserId}</td>
                            <td>${record.BookId}</td>
                            <td>${record.BookName}</td>
                            <td>${record.DueDate}</td>
                            <td>
                                <button class="return-button" data-book-id="${record.BookId}" data-user-id="${record.UserId}">
                                    Returned
                                </button>
                            </td>
                        `;
                        tbody.appendChild(row);
                    });

                    // Add event listeners to Return buttons
                    document.querySelectorAll('.return-button').forEach(button => {
                        button.addEventListener('click', () => {
                            const bookId = button.getAttribute('data-book-id');
                            const userId = button.getAttribute('data-user-id');

                            console.log(`Returning book: BookId=${bookId}, UserId=${userId}`);

                            fetch('/return-book', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ bookId, userId })
                            })
                                .then(response => {
                                    if (!response.ok) {
                                        throw new Error(`Failed to return book: ${response.statusText}`);
                                    }
                                    console.log('Book returned successfully');
                                    fetchRecords(userId); // Refresh the records
                                })
                                .catch(error => {
                                    console.error('Error returning book:', error);
                                    alert('Failed to return book. Please try again.');
                                });
                        });
                    });
                })
                .catch(error => {
                    console.error('Error fetching records:', error);
                    const tbody = document.querySelector('#recordsTable tbody');
                    tbody.innerHTML = `<tr><td colspan="6" style="text-align: center;">Error fetching records. Please try again.</td></tr>`;
                });
        }

        // Fetch all records on page load
        fetchRecords();

        // Add event listener to the search button
        document.getElementById('searchButton').addEventListener('click', () => {
            const userId = document.getElementById('searchUserId').value;
            console.log(`Searching for User ID: ${userId}`);
            fetchRecords(userId);
        });

        // Add event listener to the search input (for Enter key)
        document.getElementById('searchUserId').addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const userId = document.getElementById('searchUserId').value;
                console.log(`Searching for User ID: ${userId}`);
                fetchRecords(userId);
            }
        });
    </script>
</body>
</html>